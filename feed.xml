<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://colagom.github.io/</id><title>Gom Log</title><subtitle>개발 조각모음</subtitle> <updated>2025-03-02T13:55:40+09:00</updated> <author> <name>ColaGom</name> <uri>https://colagom.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://colagom.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://colagom.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> © 2025 ColaGom </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Typescript Utility Types 훑어보기</title><link href="https://colagom.github.io/posts/ts-utility-type/" rel="alternate" type="text/html" title="Typescript Utility Types 훑어보기" /><published>2023-12-03T00:00:00+09:00</published> <updated>2023-12-03T00:00:00+09:00</updated> <id>https://colagom.github.io/posts/ts-utility-type/</id> <content src="https://colagom.github.io/posts/ts-utility-type/" /> <author> <name>ColaGom</name> </author> <category term="Dev" /> <category term="Frontend" /> <summary> Utility Types? Typescript에서 제공하는 타입이며 일반 타입을 편리(정말?)하게 활용 할 수 있게 해준다. 강타입 언어를 넘어 최강타입 언어정도가 되는게 목적이 아닐까? 굳이 언어 레벨에서 별도의 타입으로 제공할만한 내용들일까..? 라는 의문이 들지만 typescript 기반 라이브러리 내부 구현 파악에 필요하므로 한번 살펴보자. 정리하다보니 왠지 모르게 자바스크립트에 대한 호감도가 상승했다. Awaited T 가 Promise인 경우 Promise를 unwrap 해준다. type A = string | Promise&amp;lt;number&amp;gt; A = string | number type ShitTS = Promise&amp;lt;Promise&amp;lt;Promise&amp;lt;strin... </summary> </entry> <entry><title>Redux: createAsyncThunk?</title><link href="https://colagom.github.io/posts/redux-create-thunk/" rel="alternate" type="text/html" title="Redux: createAsyncThunk?" /><published>2023-11-23T00:00:00+09:00</published> <updated>2023-11-23T00:00:00+09:00</updated> <id>https://colagom.github.io/posts/redux-create-thunk/</id> <content src="https://colagom.github.io/posts/redux-create-thunk/" /> <author> <name>ColaGom</name> </author> <category term="Dev" /> <category term="Frontend" /> <summary> Redux? JS 진영의 대표적인 상태 관리 라이브러리 중 하나, Flux 패턴을 활용한 또 하나의 variant 정도로 보여지며 Flux에서 이야기하는 component들을 잘 추상화하여 제공해준다. 완성도가 꽤나 높은 라이브러리. createAsyncThunk Flux pattern에서 State를 변경하는 코드로 나타내면 아래와 같다 dispatch(Action): State 흔히 reducer라고 표현하는 그것이다. 여기서, 네트워크 통신 또는 파일 IO 등이 필요한 비동기 처리를 하는과정을 SideEffect 라고 얘기하며 일반적으로 관련 구현을 살펴보면 아래와 같다. const fetchData = () =&amp;gt; { dispatch(setLoading(true)) tr... </summary> </entry> <entry><title>제주도 클린하우스 위치찾기 서비스</title><link href="https://colagom.github.io/posts/jeju/" rel="alternate" type="text/html" title="제주도 클린하우스 위치찾기 서비스" /><published>2023-08-12T00:00:00+09:00</published> <updated>2025-03-02T13:52:57+09:00</updated> <id>https://colagom.github.io/posts/jeju/</id> <content src="https://colagom.github.io/posts/jeju/" /> <author> <name>ColaGom</name> </author> <category term="Life" /> <summary> 클린하우스? 제주도에서 쓰레기와 재활용품을 배출하는 곳. 제주도에 숙소를 구해두고 자주 내려가고 있는데 최근 쓰레기 배출을 하다가 개고생해서 만들었다. (관련 앱이 있는데 위치정보가 잘못되어있더라..) 기능 공공데이터 포털에서 최신데이터를 수집하여 지도에 표시. 제주도 클린하우스찾기 </summary> </entry> <entry><title>Spring, opencsv 활용하여 csv 내보내기</title><link href="https://colagom.github.io/posts/spring-csv/" rel="alternate" type="text/html" title="Spring, opencsv 활용하여 csv 내보내기" /><published>2023-07-07T00:00:00+09:00</published> <updated>2023-07-07T19:17:28+09:00</updated> <id>https://colagom.github.io/posts/spring-csv/</id> <content src="https://colagom.github.io/posts/spring-csv/" /> <author> <name>ColaGom</name> </author> <category term="Dev" /> <category term="Spring" /> <summary> OpenCSV jvm을 지원하는 csv 라이브러리 중 가장 지원하는 커스텀 기능과 사용성이 좋아 csv를 다룰 일이 있으면 사용 중. Comparator 간단한 Comparator이며 reflection을 이용하여 클래스의 프로퍼티 순서대로 칼럼이 생성되도록 구현 class MyComparator&amp;lt;T&amp;gt;(private val clazz: Class&amp;lt;T&amp;gt;) : Comparator&amp;lt;String&amp;gt; { private val memberOrder: List&amp;lt;String&amp;gt; by lazy { FieldUtils.getAllFields(clazz) .map { it.getDeclaredAnnotation(CsvBindByNa... </summary> </entry> <entry><title>Nextjs, Nodejs, csv 파일 업로드 및 파싱</title><link href="https://colagom.github.io/posts/csv-parse/" rel="alternate" type="text/html" title="Nextjs, Nodejs, csv 파일 업로드 및 파싱" /><published>2023-07-04T00:00:00+09:00</published> <updated>2023-09-16T01:37:51+09:00</updated> <id>https://colagom.github.io/posts/csv-parse/</id> <content src="https://colagom.github.io/posts/csv-parse/" /> <author> <name>ColaGom</name> </author> <category term="Dev" /> <category term="Frontend" /> <summary> 지난 블로그에서 드래그 &amp;amp; 드롭 파일 업로드를 구현을 정리했는데 이번엔 csv 파일 업로드와 파싱관련하여 레퍼런스찾기가 힘들다.. 검색해보면 죄다 csv-parser를 사용한 예시인데 csv-parse는 fs의 ReadStream만 활용할 수 있기때문에 HTTP POST body를 파싱하기엔 적절하지 않다. 일부 예시는 이런경우 body(Blob)을 로컬에 파일로 저장 한 뒤 ReadStream을 만들어서 사용하면 된다고하는데 왜그래… 파일 업로드 So simple, 이때까지만 해도 금방 끝날 줄만 알았던 작업이… fetch('/api/product', { method: 'POST', body: file }).then((response) =&amp;gt; { //handle respo... </summary> </entry> </feed>
